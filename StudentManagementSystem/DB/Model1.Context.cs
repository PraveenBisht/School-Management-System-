//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentManagementSystem.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StudentsEntities : DbContext
    {
        public StudentsEntities()
            : base("name=StudentsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BloodGroup> BloodGroups { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
    
        public virtual ObjectResult<BloodGroupList_Result> BloodGroupList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BloodGroupList_Result>("BloodGroupList");
        }
    
        public virtual int DeletebyId(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletebyId", studentIdParameter);
        }
    
        public virtual int InsertStudent(string firstName, string lastName, Nullable<System.DateTime> dOB, string emailId, string phoneNo, string address, string bloodGroup, string profilePic, string fatherName, string category, string mainSubject, string document1, string document2, string password, string obtional1, string obtional2, string obtional3, string obtional4, string role, Nullable<int> subjectId, Nullable<int> bloodGroupId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var profilePicParameter = profilePic != null ?
                new ObjectParameter("ProfilePic", profilePic) :
                new ObjectParameter("ProfilePic", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var mainSubjectParameter = mainSubject != null ?
                new ObjectParameter("MainSubject", mainSubject) :
                new ObjectParameter("MainSubject", typeof(string));
    
            var document1Parameter = document1 != null ?
                new ObjectParameter("Document1", document1) :
                new ObjectParameter("Document1", typeof(string));
    
            var document2Parameter = document2 != null ?
                new ObjectParameter("Document2", document2) :
                new ObjectParameter("Document2", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var obtional1Parameter = obtional1 != null ?
                new ObjectParameter("Obtional1", obtional1) :
                new ObjectParameter("Obtional1", typeof(string));
    
            var obtional2Parameter = obtional2 != null ?
                new ObjectParameter("Obtional2", obtional2) :
                new ObjectParameter("Obtional2", typeof(string));
    
            var obtional3Parameter = obtional3 != null ?
                new ObjectParameter("Obtional3", obtional3) :
                new ObjectParameter("Obtional3", typeof(string));
    
            var obtional4Parameter = obtional4 != null ?
                new ObjectParameter("Obtional4", obtional4) :
                new ObjectParameter("Obtional4", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var bloodGroupIdParameter = bloodGroupId.HasValue ?
                new ObjectParameter("BloodGroupId", bloodGroupId) :
                new ObjectParameter("BloodGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudent", firstNameParameter, lastNameParameter, dOBParameter, emailIdParameter, phoneNoParameter, addressParameter, bloodGroupParameter, profilePicParameter, fatherNameParameter, categoryParameter, mainSubjectParameter, document1Parameter, document2Parameter, passwordParameter, obtional1Parameter, obtional2Parameter, obtional3Parameter, obtional4Parameter, roleParameter, subjectIdParameter, bloodGroupIdParameter);
        }
    
        public virtual ObjectResult<LoginCheck_Result> LoginCheck(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginCheck_Result>("LoginCheck", emailIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> MailVarify(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MailVarify", emailIdParameter);
        }
    
        public virtual int ProfilePicUpdate(Nullable<int> studentId, string profilePic)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var profilePicParameter = profilePic != null ?
                new ObjectParameter("ProfilePic", profilePic) :
                new ObjectParameter("ProfilePic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProfilePicUpdate", studentIdParameter, profilePicParameter);
        }
    
        public virtual int StudentDelete(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StudentDelete", studentIdParameter);
        }
    
        public virtual ObjectResult<StudentRecord_Result> StudentRecord()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentRecord_Result>("StudentRecord");
        }
    
        public virtual int StudentUpdate(Nullable<int> studentId, string firstName, string lastName, Nullable<System.DateTime> dOB, string phoneNo, string address, string bloodGroup, string profilePic, string fatherName, string category, string mainSubject, string document1, string document2, string password, string obtional1, string obtional2, string obtional3, string obtional4, string role, Nullable<bool> isDeleted, Nullable<int> subjectId, Nullable<int> bloodGroupId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var profilePicParameter = profilePic != null ?
                new ObjectParameter("ProfilePic", profilePic) :
                new ObjectParameter("ProfilePic", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var mainSubjectParameter = mainSubject != null ?
                new ObjectParameter("MainSubject", mainSubject) :
                new ObjectParameter("MainSubject", typeof(string));
    
            var document1Parameter = document1 != null ?
                new ObjectParameter("Document1", document1) :
                new ObjectParameter("Document1", typeof(string));
    
            var document2Parameter = document2 != null ?
                new ObjectParameter("Document2", document2) :
                new ObjectParameter("Document2", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var obtional1Parameter = obtional1 != null ?
                new ObjectParameter("Obtional1", obtional1) :
                new ObjectParameter("Obtional1", typeof(string));
    
            var obtional2Parameter = obtional2 != null ?
                new ObjectParameter("Obtional2", obtional2) :
                new ObjectParameter("Obtional2", typeof(string));
    
            var obtional3Parameter = obtional3 != null ?
                new ObjectParameter("Obtional3", obtional3) :
                new ObjectParameter("Obtional3", typeof(string));
    
            var obtional4Parameter = obtional4 != null ?
                new ObjectParameter("Obtional4", obtional4) :
                new ObjectParameter("Obtional4", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var bloodGroupIdParameter = bloodGroupId.HasValue ?
                new ObjectParameter("BloodGroupId", bloodGroupId) :
                new ObjectParameter("BloodGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StudentUpdate", studentIdParameter, firstNameParameter, lastNameParameter, dOBParameter, phoneNoParameter, addressParameter, bloodGroupParameter, profilePicParameter, fatherNameParameter, categoryParameter, mainSubjectParameter, document1Parameter, document2Parameter, passwordParameter, obtional1Parameter, obtional2Parameter, obtional3Parameter, obtional4Parameter, roleParameter, isDeletedParameter, subjectIdParameter, bloodGroupIdParameter);
        }
    
        public virtual ObjectResult<SubjectList_Result> SubjectList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubjectList_Result>("SubjectList");
        }
    
        public virtual ObjectResult<Student> UserDetailbyId(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student>("UserDetailbyId", studentIdParameter);
        }
    
        public virtual ObjectResult<Student> UserDetailbyId(Nullable<int> studentId, MergeOption mergeOption)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student>("UserDetailbyId", mergeOption, studentIdParameter);
        }
    }
}
